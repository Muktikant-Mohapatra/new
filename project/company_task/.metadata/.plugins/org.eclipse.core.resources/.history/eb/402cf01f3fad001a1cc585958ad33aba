package com.parking.service;

import java.util.Calendar;
import java.util.Random;

import com.parking.domain.model.ParkingLot;
import com.parking.dto.CarDto;
import com.parking.dto.ParkingReceiptDto;

public class CarParkingService implements ParkingService {
	private String entryGate;
	private Object[] parkingArea;
	private CarDto[] car;
	private int parkingSlot;

	@Override
	public void park(CarDto[] car, ParkingLot parkingLot) {

		this.entryGate = parkingLot.getEntryGate();
		this.parkingArea = parkingLot.getParkingArea();
		this.car = car;
		if (entryGate == "first") {
			firstEntryGateParking(parkingLot);
		}
		if (entryGate == "last") {
			lastEntryGateParking(parkingLot);
		}
		if (entryGate == "middle") {
			middleEntryGateParking(parkingLot);
		}
		printReceipt();
	}

	private void printReceipt() {
		Random randomNum = new Random();
		System.out.println(new ParkingReceiptDto(randomNum.nextInt() + "-RECEIPT-" + randomNum.nextInt(),car, parkingSlot, Calendar.getInstance().getTime()));
	}

	private int firstEntryGateParking(ParkingLot parkingLot) {

		for (int i = 0, j = 0; i < parkingArea.length && j < car.length; i++,j++) {
			if (parkingArea[i] == null) {
				parkingSlot = i;
				parkingArea[i] = car[j];
				break;
			}
		}
		return parkingSlot;
	}

	private int lastEntryGateParking(ParkingLot parkingLot) {
		for (int i = parkingArea.length - 1,j=0; i >= 0&& j < car.length; i--,j++) {
			if (parkingArea[i] == null) {
				parkingSlot = i;
				parkingArea[i] = car[j];
				break;
			}
		}
		return parkingSlot;
	}

	private int middleEntryGateParking(ParkingLot parkingLot) {
		int middle = parkingArea.length / 2;
		for (int i = middle - 1, j = middle + 1,k=0; (i < middle && i >= 0)
				&& (j > middle && j < parkingArea.length)&&(k < car.length); i--, j++,k++) {
			if (parkingArea[middle] == null) {
				parkingSlot = middle;
				parkingArea[middle] = car[k];
				break;
			}
			if (((middle - i) == (j - middle))) {
				if (parkingArea[i] == null) {
					parkingSlot = i;
					parkingArea[i] = car[k];
					break;
				} else if (parkingArea[j] == null) {
					parkingSlot = j;
					parkingArea[j] = car[k];
					break;
				}

			} else if (((middle - i) > (j - middle)) && (parkingArea[j] == null)) {
				parkingSlot = j;
				parkingArea[j] = car[k];
				break;
			} else if (((middle - i) < (j - middle)) && (parkingArea[i] == null)) {
				parkingSlot = i;
				parkingArea[i] = car[k];
				break;
			}

		}
		return parkingSlot;
	}

	@Override
	public void unPark(int parkingSlotNumber) {
		parkingArea[parkingSlotNumber] = null;
	}

}
